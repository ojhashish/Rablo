name: Build and Deploy Python App to EC2
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/python-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/python-app:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
          
      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client
          
      - name: Configure SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_HOSTS }}" | tr ' ' '\n' | while read host; do
            ssh-keyscan -H $host >> ~/.ssh/known_hosts 2>/dev/null || true
          done
          chmod 600 ~/.ssh/known_hosts
          
      - name: Deploy to EC2 instances and ensure ALB mounting
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.EC2_HOSTS }}" | tr ' ' '\n' | while IFS= read -r host; do
            if [ -n "$host" ]; then
              echo "Initiating deployment to EC2 instance: $host..."
              ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ec2-user@$host << 'EOF'
                # Start Docker service
                sudo systemctl start docker || sudo service docker start
                echo "Docker service ensured."
                
                # Login to Docker Hub
                echo "${{ env.DOCKER_PASSWORD }}" | docker login --username "${{ env.DOCKER_USERNAME }}" --password-stdin
                echo "Logged into Docker Hub on EC2."
                
                # Stop and remove existing container if it exists
                if [ "$(docker ps -aq -f name=my-python-app)" ]; then
                  echo "Stopping and removing old container..."
                  docker stop my-python-app || true
                  docker rm my-python-app || true
                else
                  echo "No existing container named 'my-python-app' found."
                fi
                
                # Pull latest Docker image
                echo "Pulling latest Docker image: ${{ env.DOCKER_USERNAME }}/python-app:latest..."
                docker pull "${{ env.DOCKER_USERNAME }}/python-app:latest"
                echo "Image pulled successfully."
                
                # Start new container
                echo "Starting new container..."
                docker run -d -p 80:80 --name my-python-app "${{ env.DOCKER_USERNAME }}/python-app:latest"
                echo "New container started."
                
                # Health check verification
                echo "ALB's health checks will now verify the new container's health on this instance."
                echo "Deployment and ALB health check readiness complete for $host."
                
                # Verify container is running
                if [ "$(docker ps -q -f name=my-python-app)" ]; then
                  echo "Container is running successfully."
                else
                  echo "Warning: Container may not be running properly."
                  docker logs my-python-app || true
                fi
EOF
              echo "Deployment completed for $host"
            fi
          done
          echo "All deployments completed."
