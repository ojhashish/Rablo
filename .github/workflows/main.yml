k    # .github/workflows/main.yml
    name: Build and Deploy Python App to EC2

    on:
      push:
        branches:
          - main # Trigger the workflow on pushes to the 'main' branch

    jobs:
      build-and-push:
        runs-on: ubuntu-latest # Use a fresh Ubuntu runner for each job

        steps:
          - name: Checkout code
            uses: actions/checkout@v2 # Action to checkout your repository code

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1 # Set up Docker Buildx for multi-platform builds

          - name: Login to Docker Hub
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }} # Use GitHub secret for Docker Hub username
              password: ${{ secrets.DOCKER_PASSWORD }} # Use GitHub secret for Docker Hub password

          - name: Build and push Docker image
            run: |
              # Build the Docker image with a dynamic tag based on commit SHA
              docker build -t ${{ secrets.DOCKER_USERNAME }}/python-app:latest .
              # Push the image to Docker Hub
              docker push ${{ secrets.DOCKER_USERNAME }}/python-app:latest

      deploy:
        needs: build-and-push # This job depends on the successful completion of 'build-and-push'
        runs-on: ubuntu-latest

        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Set up SSH
            uses: webfactory/ssh-agent@v0.5.3
            with:
              ssh-private-key: ${{ secrets.EC2_SSH_KEY }} # Use GitHub secret for EC2 SSH private key

          - name: Install SSH client
            run: sudo apt-get update && sudo apt-get install -y openssh-client

          - name: Configure SSH known hosts
            run: |
              # Add all EC2 hosts to known_hosts to avoid host key checking prompts
              echo "${{ secrets.EC2_HOSTS }}" | tr ' ' '\n' | while read host; do ssh-keyscan $host >> ~/.ssh/known_hosts; done
              chmod 600 ~/.ssh/known_hosts # Ensure correct permissions for known_hosts

          - name: Deploy to EC2 instances
            env:
              DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            run: |
              # Iterate over each EC2 host and deploy the new Docker image
              echo "${{ secrets.EC2_HOSTS }}" | tr ' ' '\n' | while read host; do
                echo "Deploying to $host..."
                # SSH into the EC2 instance and execute commands
                ssh -o StrictHostKeyChecking=no ec2-user@$host << 'EOF'
                  # Ensure Docker is running
                  sudo systemctl start docker || sudo service docker start
                  # Login to Docker Hub on the EC2 instance
                  echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "$DOCKER_USERNAME" --password-stdin
                  # Stop and remove any existing container
                  if [ $(docker ps -aq -f name=my-python-app) ]; then
                    docker stop my-python-app || true
                    docker rm my-python-app || true
                  fi
                  # Pull the latest image
                  docker pull "$DOCKER_USERNAME"/python-app:latest
                  # Run the new container
                  docker run -d -p 80:80 --name my-python-app "$DOCKER_USERNAME"/python-web-app:latest
                  echo "Deployment on $host complete."
                EOF
              done
    
